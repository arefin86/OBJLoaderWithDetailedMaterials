This project uses Three.js to load .obj files onto a webpage.
All original code is by mrdoob et al - from Three.js

The HTML file to be run is in WebContent - advancedMaterialLoader001.html
The JavaScript files are in /js
The models ( binary ) with maps are in /models
The original .obj and .mtl are in /OBJs_with_textures

The OBJ files are converted with a python script. However while creating materials read off the .mtl file - only diffuse colours and textures are displayed, as three.js creates a MeshLambertMaterial. 
To support specular highlights ( glossiness ), normal maps, light maps etc . ( and other parameters as specified in the .mtl file ) we have to create a MeshShaderMaterial. 

I have edited the python script to flag these extra material properties read off the .mtl file in the JSON it generates.

Then I edited three.js ( /js/threer45.js )code to create a shader material by default to create materials with all the combined properties, for a better rendering of the models. 

I use 3ds Max 2011 x64 to create my models, and use the guruware OBJ exporter to export my models to .obj . All created models load perfectly - eg:- the Teapot. 

Issues are with some models - they don't load - eg:- ferrari, an error occurs in the computeTangents function ( Threer45.js line 1440 ). The computeTangents function is required by the shader material ( my assumption ) and something is missing in the model that prevents it from loading. Usually these models are created somewhere else. These models load perfectly on 3d modeling software and stuff like Meshlab and Assimp. 

This is what I am trying to get around. All help will be greatly appreciated. 

PS- I am noob at 3d programming and coding in general and all things like this. If I'm doing something wrong - do tell me. 